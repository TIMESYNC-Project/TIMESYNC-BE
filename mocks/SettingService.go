// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	setting "timesync-be/features/setting"

	mock "github.com/stretchr/testify/mock"
)

// SettingService is an autogenerated mock type for the SettingService type
type SettingService struct {
	mock.Mock
}

// EditSetting provides a mock function with given fields: token, updateSetting
func (_m *SettingService) EditSetting(token interface{}, updateSetting setting.Core) (setting.Core, error) {
	ret := _m.Called(token, updateSetting)

	var r0 setting.Core
	if rf, ok := ret.Get(0).(func(interface{}, setting.Core) setting.Core); ok {
		r0 = rf(token, updateSetting)
	} else {
		r0 = ret.Get(0).(setting.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, setting.Core) error); ok {
		r1 = rf(token, updateSetting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSetting provides a mock function with given fields:
func (_m *SettingService) GetSetting() (setting.Core, error) {
	ret := _m.Called()

	var r0 setting.Core
	if rf, ok := ret.Get(0).(func() setting.Core); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(setting.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSettingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewSettingService creates a new instance of SettingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSettingService(t mockConstructorTestingTNewSettingService) *SettingService {
	mock := &SettingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
