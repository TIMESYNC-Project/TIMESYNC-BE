// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	user "timesync-be/features/user"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// AdminEditEmployee provides a mock function with given fields: token, employeeID, fileData, updateData
func (_m *UserService) AdminEditEmployee(token interface{}, employeeID uint, fileData multipart.FileHeader, updateData user.Core) (user.Core, error) {
	ret := _m.Called(token, employeeID, fileData, updateData)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(interface{}, uint, multipart.FileHeader, user.Core) user.Core); ok {
		r0 = rf(token, employeeID, fileData, updateData)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, uint, multipart.FileHeader, user.Core) error); ok {
		r1 = rf(token, employeeID, fileData, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Csv provides a mock function with given fields: fileHeader
func (_m *UserService) Csv(fileHeader multipart.FileHeader) error {
	ret := _m.Called(fileHeader)

	var r0 error
	if rf, ok := ret.Get(0).(func(multipart.FileHeader) error); ok {
		r0 = rf(fileHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: token, employeeID
func (_m *UserService) Delete(token interface{}, employeeID uint) error {
	ret := _m.Called(token, employeeID)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, uint) error); ok {
		r0 = rf(token, employeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEmployee provides a mock function with given fields:
func (_m *UserService) GetAllEmployee() ([]user.Core, error) {
	ret := _m.Called()

	var r0 []user.Core
	if rf, ok := ret.Get(0).(func() []user.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: nip, password
func (_m *UserService) Login(nip string, password string) (string, string, user.Core, error) {
	ret := _m.Called(nip, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(nip, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(nip, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 user.Core
	if rf, ok := ret.Get(2).(func(string, string) user.Core); ok {
		r2 = rf(nip, password)
	} else {
		r2 = ret.Get(2).(user.Core)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string) error); ok {
		r3 = rf(nip, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Profile provides a mock function with given fields: token
func (_m *UserService) Profile(token interface{}) (user.Core, error) {
	ret := _m.Called(token)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(interface{}) user.Core); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileEmployee provides a mock function with given fields: userID
func (_m *UserService) ProfileEmployee(userID uint) (user.Core, error) {
	ret := _m.Called(userID)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(uint) user.Core); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: token, newUser
func (_m *UserService) Register(token interface{}, newUser user.Core) (user.Core, error) {
	ret := _m.Called(token, newUser)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(interface{}, user.Core) user.Core); ok {
		r0 = rf(token, newUser)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, user.Core) error); ok {
		r1 = rf(token, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: token, quote
func (_m *UserService) Search(token interface{}, quote string) ([]user.Core, error) {
	ret := _m.Called(token, quote)

	var r0 []user.Core
	if rf, ok := ret.Get(0).(func(interface{}, string) []user.Core); ok {
		r0 = rf(token, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string) error); ok {
		r1 = rf(token, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: token, fileData, updateData
func (_m *UserService) Update(token interface{}, fileData multipart.FileHeader, updateData user.Core) (user.Core, error) {
	ret := _m.Called(token, fileData, updateData)

	var r0 user.Core
	if rf, ok := ret.Get(0).(func(interface{}, multipart.FileHeader, user.Core) user.Core); ok {
		r0 = rf(token, fileData, updateData)
	} else {
		r0 = ret.Get(0).(user.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, multipart.FileHeader, user.Core) error); ok {
		r1 = rf(token, fileData, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
