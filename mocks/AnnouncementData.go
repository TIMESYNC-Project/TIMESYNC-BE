// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	announcement "timesync-be/features/announcement"

	mock "github.com/stretchr/testify/mock"
)

// AnnouncementData is an autogenerated mock type for the AnnouncementData type
type AnnouncementData struct {
	mock.Mock
}

// DeleteAnnouncement provides a mock function with given fields: adminID, announcementID
func (_m *AnnouncementData) DeleteAnnouncement(adminID uint, announcementID uint) error {
	ret := _m.Called(adminID, announcementID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(adminID, announcementID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmployeeInbox provides a mock function with given fields: employeeID
func (_m *AnnouncementData) EmployeeInbox(employeeID uint) ([]announcement.Core, error) {
	ret := _m.Called(employeeID)

	var r0 []announcement.Core
	if rf, ok := ret.Get(0).(func(uint) []announcement.Core); ok {
		r0 = rf(employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]announcement.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncement provides a mock function with given fields:
func (_m *AnnouncementData) GetAnnouncement() ([]announcement.Core, error) {
	ret := _m.Called()

	var r0 []announcement.Core
	if rf, ok := ret.Get(0).(func() []announcement.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]announcement.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnnouncementDetail provides a mock function with given fields: adminID, announcementID
func (_m *AnnouncementData) GetAnnouncementDetail(adminID uint, announcementID uint) (announcement.Core, error) {
	ret := _m.Called(adminID, announcementID)

	var r0 announcement.Core
	if rf, ok := ret.Get(0).(func(uint, uint) announcement.Core); ok {
		r0 = rf(adminID, announcementID)
	} else {
		r0 = ret.Get(0).(announcement.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(adminID, announcementID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostAnnouncement provides a mock function with given fields: adminID, newAnnouncement
func (_m *AnnouncementData) PostAnnouncement(adminID uint, newAnnouncement announcement.Core) (announcement.Core, error) {
	ret := _m.Called(adminID, newAnnouncement)

	var r0 announcement.Core
	if rf, ok := ret.Get(0).(func(uint, announcement.Core) announcement.Core); ok {
		r0 = rf(adminID, newAnnouncement)
	} else {
		r0 = ret.Get(0).(announcement.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, announcement.Core) error); ok {
		r1 = rf(adminID, newAnnouncement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAnnouncementData interface {
	mock.TestingT
	Cleanup(func())
}

// NewAnnouncementData creates a new instance of AnnouncementData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAnnouncementData(t mockConstructorTestingTNewAnnouncementData) *AnnouncementData {
	mock := &AnnouncementData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
