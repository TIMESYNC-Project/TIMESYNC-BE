// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	company "timesync-be/features/company"

	mock "github.com/stretchr/testify/mock"
)

// CompanyData is an autogenerated mock type for the CompanyData type
type CompanyData struct {
	mock.Mock
}

// EditProfile provides a mock function with given fields: adminID, updateData
func (_m *CompanyData) EditProfile(adminID uint, updateData company.Core) (company.Core, error) {
	ret := _m.Called(adminID, updateData)

	var r0 company.Core
	if rf, ok := ret.Get(0).(func(uint, company.Core) company.Core); ok {
		r0 = rf(adminID, updateData)
	} else {
		r0 = ret.Get(0).(company.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, company.Core) error); ok {
		r1 = rf(adminID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields:
func (_m *CompanyData) GetProfile() (company.Core, error) {
	ret := _m.Called()

	var r0 company.Core
	if rf, ok := ret.Get(0).(func() company.Core); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(company.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanyData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyData creates a new instance of CompanyData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyData(t mockConstructorTestingTNewCompanyData) *CompanyData {
	mock := &CompanyData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
